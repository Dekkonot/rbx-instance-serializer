local Api = require(script.Parent.Parent.Modules.API)
local escapeString = require(script.Parent.EscapeString)

--- Names that are forbidden and can't be generated by the name list generating function.
local FORBIDDEN_NAMES = {
    -- keywords
    ["and"] = true, ["break"] = true, ["do"] = true, ["else"] = true, ["elseif"] = true,
    ["end"] = true, ["false"] = true, ["for"] = true, ["function"] = true, ["if"] = true,
    ["in"] = true, ["local"] = true, ["nil"] = true, ["not"] = true, ["or"] = true,
    ["repeat"] = true, ["return"] = true, ["then"] = true, ["true"] = true, ["until"] = true, ["while"] = true,

    -- essential globals (ones that will cause the serializer to break if they're replaced in an environment)
    ["game"] = true, ["workspace"] = true, ["script"] = true, ["Enum"] = true, ["ipairs"] = true, ["require"] = true,

    -- libraries (that could be used by the serializer)
    ["Axes"] = true, ["BrickColor"] = true, ["CFrame"] = true, ["Color3"] = true, ["ColorSequence"] = true,
    ["ColorSequenceKeypoint"] = true, ["Faces"] = true, ["Instance"] = true, ["NumberRange"] = true,
    ["NumberSequence"] = true, ["NumberSequenceKeypoint"] = true, ["PhysicalProperties"] = true, ["Ray"] = true,
    ["Rect"] = true, ["UDim"] = true, ["UDim2"] = true, ["Vector2"] = true, ["Vector3"] = true,

    -- globals used for tag serialization
    ["CollectionService"] = true,
}

local NAME_CHARACTERS = { [0] =
	"Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l",
	"m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y",
	"z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L",
	"M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y",
}

local VERBOSE_GET_SERVICE = "game:GetService(\"%s\")"
local MINIFIED_GET_SERVICE = "game:GetService\"%s\")"

local isService = Api.isService

local function makeFullNameVerbose(object)
    if object == game then
        return "game"
    elseif object == workspace then
        return "workspace"
    elseif isService(object.ClassName) then
        return string.format(VERBOSE_GET_SERVICE, object.ClassName)
    end
    local fullName = ""
    repeat
        local name = object.Name
        if object == game then
            return "game" .. fullName
        elseif object == "workspace" then
            return "workspace" .. fullName
        elseif isService(object.ClassName) then
            return string.format(VERBOSE_GET_SERVICE, object.ClassName) .. fullName
        elseif string.find(name, "[^%w_]") or string.find(name, "^%d") then
            fullName = string.format("[\"%s\"]", escapeString(name)) .. fullName
        else
            fullName = "." .. name .. fullName
        end
    until not object
    return fullName
end

local function makeFullNameMinified(object)
    if object == game then
        return "game"
    elseif object == workspace then
        return "workspace"
    elseif isService(object.ClassName) then
        return string.format(MINIFIED_GET_SERVICE, object.ClassName)
    end
    local fullName = ""
    repeat
        local name = object.Name
        if object == game then
            return "game" .. fullName
        elseif object == "workspace" then
            return "workspace" .. fullName
        elseif isService(object.ClassName) then
            return string.format(MINIFIED_GET_SERVICE, object.ClassName) .. fullName
        elseif string.find(name, "[^%w_]") or string.find(name, "^%d") then
            fullName = string.format("[\"%s\"]", escapeString(name)) .. fullName
        else
            fullName = "." .. name .. fullName
        end
    until not object
    return fullName
end

local function makeNameListVerbose(object, descendants)
    local objects = table.create(#descendants + 1)
    objects[1] = object
    for i, v in ipairs(descendants) do
        objects[i + 1] = v
    end
    
    local nameMap = {}
    local nameCounter = {}
    for _, v in ipairs(objects) do
        local name = string.gsub(string.gsub(v.Name, "[^%w_]", ""), "^%d+", "")
        if name == "" then
            name = v.ClassName
        end

        if nameCounter[name] then
            local rawName = name 
            name ..= tostring(nameCounter[name])
            nameCounter[rawName] += 1
        else
            nameCounter[name] = 0
        end

        if FORBIDDEN_NAMES[name] then
            name ..= "_"
        end

        nameMap[v] = name
    end

    return nameMap
end

local function makeNameListMinified(object, descendants)
    local objects = table.create(#descendants + 1)
    objects[1] = object
    for i, v in ipairs(descendants) do
        objects[i + 1] = v
    end

    local nameMap = {}
    for i, v in ipairs(objects) do
        local name = ""
        repeat
            name ..= NAME_CHARACTERS[i % 52]
            i = math.floor(i / 52)
        until i <= 0

        if FORBIDDEN_NAMES[name] then
            name ..= "_"
        end
 
        nameMap[v] = name
    end

    return nameMap
end

return {
    makeFullNameVerbose = makeFullNameVerbose,
    makeFullNameMinified = makeFullNameMinified,

    makeNameListVerbose = makeNameListVerbose,
    makeNameListMinified = makeNameListMinified,
}